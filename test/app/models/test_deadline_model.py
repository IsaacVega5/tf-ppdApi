import pytest
from datetime import datetime
from uuid import UUID
from sqlmodel import Session, SQLModel, create_engine
from app.models.DeadLine import DeadLine, DeadLineBase

# Fixtures para datos de prueba
@pytest.fixture
def valid_deadline_data():
    return {
        "deadline_date": datetime(2023, 12, 31, 23, 59),
        "id_action": "action_123",
        "year": 2023
    }

@pytest.fixture
def minimal_deadline_data():
    return {
        "deadline_date": datetime(2023, 12, 31)
    }

# Configuración de base de datos en memoria
DATABASE_URL = "sqlite:///:memory:"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})

@pytest.fixture(name="session", scope="function")
def session_fixture():
    """Fixture para sesión de base de datos con transacción aislada por test."""
    SQLModel.metadata.create_all(engine)
    
    connection = engine.connect()
    transaction = connection.begin()
    session = Session(bind=connection)

    yield session

    session.close()
    transaction.rollback()
    connection.close()

# Tests para DeadLineBase
class TestDeadLineBase:
    def test_create_with_valid_data(self, valid_deadline_data):
        """Prueba creación con datos válidos"""
        deadline = DeadLineBase(**valid_deadline_data)
        assert deadline.deadline_date == datetime(2023, 12, 31, 23, 59)
        assert deadline.id_action == "action_123"
        assert deadline.year == 2023

    def test_create_with_minimal_data(self, minimal_deadline_data):
        """Prueba creación con datos mínimos"""
        deadline = DeadLineBase(**minimal_deadline_data)
        assert deadline.deadline_date == datetime(2023, 12, 31)
        assert deadline.id_action is None
        assert deadline.year is None

# Tests para DeadLine
class TestDeadLine:
    def test_inherits_from_deadlinebase(self):
        """Verifica la herencia correcta"""
        assert issubclass(DeadLine, DeadLineBase)
        assert issubclass(DeadLine, SQLModel)

    def test_table_configuration(self):
        """Verifica configuración de tabla"""
        assert DeadLine.__tablename__ == "deadline"
        assert hasattr(DeadLine, "__table__")
        assert DeadLine.__table__.primary_key.columns.keys() == ["id_deadline"]

    def test_primary_key_autogenerated(self):
        """Test que id_deadline es generado automáticamente"""
        deadline = DeadLine(deadline_date=datetime.now())
        assert deadline.id_deadline is not None
        assert UUID(deadline.id_deadline, version=4)  # Verifica que es UUID válido

    def test_relationships_defined(self):
        """Test que las relaciones están definidas"""
        assert hasattr(DeadLine, "action")
        assert hasattr(DeadLine, "deadline_messages")
        
        relationships = DeadLine.__sqlmodel_relationships__
        assert "action" in relationships
        assert "deadline_messages" in relationships

# Tests de integración con base de datos
class TestDeadLineDB:
    def test_save_to_database(self, session: Session, valid_deadline_data):
        """Test que se puede guardar en base de datos"""
        deadline = DeadLine(**valid_deadline_data)
        session.add(deadline)
        session.commit()
        session.refresh(deadline)
        
        assert deadline.id_deadline is not None
        assert deadline.deadline_date == datetime(2023, 12, 31, 23, 59)

    def test_retrieve_from_database(self, session: Session, valid_deadline_data):
        """Test que se puede recuperar de la base de datos"""
        deadline = DeadLine(**valid_deadline_data)
        session.add(deadline)
        session.commit()
        
        retrieved = session.get(DeadLine, deadline.id_deadline)
        assert retrieved is not None
        assert retrieved.deadline_date == deadline.deadline_date
        assert retrieved.id_deadline == deadline.id_deadline

    def test_update_deadline(self, session: Session, valid_deadline_data):
        """Test que se puede actualizar un DeadLine"""
        deadline = DeadLine(**valid_deadline_data)
        session.add(deadline)
        session.commit()
        
        new_date = datetime(2024, 1, 1)
        deadline.deadline_date = new_date
        session.commit()
        session.refresh(deadline)
        
        updated = session.get(DeadLine, deadline.id_deadline)
        assert updated.deadline_date == new_date

    def test_delete_deadline(self, session: Session, valid_deadline_data):
        """Test que se puede eliminar un DeadLine"""
        deadline = DeadLine(**valid_deadline_data)
        session.add(deadline)
        session.commit()
        
        session.delete(deadline)
        session.commit()
        
        deleted = session.get(DeadLine, deadline.id_deadline)
        assert deleted is None